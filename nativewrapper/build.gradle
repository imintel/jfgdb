


    /*

        native wrapper library	


    */

    apply plugin: 'cpp'
    apply plugin: 'distribution'


    description = """native library for fgdb"""

def JAVA_HOME;

// task checkEnv << {

    if (!System.getenv('ESRI_FILE_GDB_HOME')) throw new Exception("environment variable ESRI_FILE_GDB_HOME must be defined")

    def ESRI_FILE_GDB_HOME = new File(System.getenv('ESRI_FILE_GDB_HOME'));
    JAVA_HOME = new File(System.getProperty('java.home'))
    if (JAVA_HOME.name == "jre") JAVA_HOME = JAVA_HOME.parentFile

    if (!ESRI_FILE_GDB_HOME.exists()) throw Exception("folder " + ESRI_FILE_GDB_HOME + " does not exists");
    if (!JAVA_HOME.exists()) throw Exception("folder " + JAVA_HOME + " does not exists");


// }

  distributions {
        main {
             baseName = "FGDBLibraries"
             contents {
                        from { 'build/binaries/fGDBJNIWrapperSharedLibrary' }
                    }
        }

    }



    model {
        buildTypes {
            release
        }
        
        platforms {
            x86 {
                architecture "x86"
            } 
            x64 {
                architecture "x86_64"
            } 
        }

  
    components {


            FGDBJNIWrapper(NativeLibrarySpec) {
                // targetPlatform "x86" // only available for windows
                 targetPlatform "x64"


                    sources {
                        cpp {
                            source {
                                srcDir "src/main/cxx"
                                include "**/*.cxx"
                            }
                        }
                    }

                binaries.all {
                    if (toolChain in VisualCpp) {
                    
                               cppCompiler.args "/Zi", "-I" + new File(ESRI_FILE_GDB_HOME, "include").getAbsolutePath(),
                                                            "-I" + new File(JAVA_HOME, "include").getAbsolutePath(),
                                                            "-I" + new File(JAVA_HOME, "include\\win32").getAbsolutePath()
                    
                      
                               linker.args "/LIBPATH:${ESRI_FILE_GDB_HOME.getAbsolutePath()}\\lib${targetPlatform.name == 'x64'?'64':''}",
                                "/NODEFAULTLIB", "/NOLOGO", "/EHsc" ,
                                "kernel32.lib", "advapi32.lib", "user32.lib", "gdi32.lib", "comdlg32.lib", "winspool.lib", "oleaut32.lib",
     
                                "msvcrt.lib", "oldnames.lib", "libcpmt.lib",
                                "FileGDBAPI.lib"


                    } else {

                              cppCompiler.args "-I" + new File(ESRI_FILE_GDB_HOME, "include").getAbsolutePath(),
                                                            "-I" + new File(JAVA_HOME, "include").getAbsolutePath(),
                                                            "-I" + new File(JAVA_HOME, "include/linux").getAbsolutePath()
                                                            "-I"+ new File(JAVA_HOME, "include/darwin").getAbsolutePath()
                        
                              linker.args "-L${ESRI_FILE_GDB_HOME.getAbsolutePath()}/lib", "-lFileGDBAPI", "-lfgdbunixrtl"
     


                    }

                    

                }
          
            }
        }
    }


